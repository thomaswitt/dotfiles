- " vimrc of Thomas Witt <http://github.com/thomaswitt>

set shell=/usr/bin/env\ sh
set shellcmdflag=-l\ -c

language messages en_US.UTF-8

" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"   https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" ¿ then run :PlugInstall
call plug#begin()
  " Plug 'garbas/vim-snipmate'      " TextMate-style snippets for Vim
  Plug 'AndrewRadev/switch.vim'   " Switch segments of text predefined repls
  Plug 'Xuyuanp/nerdtree-git-plugin' " Filetree
  Plug 'artnez/vim-wipeout'       " Destroy all buffers that are not open
  Plug 'ctrlpvim/ctrlp.vim'       " Fuzzy Search
  Plug 'dense-analysis/ale'       " Check/fix syntax asynchronously
  Plug 'github/copilot.vim'       " Github Copilot
  Plug 'jlanzarotta/bufexplorer'  " BufExplorer
  Plug 'junegunn/vim-easy-align'  " Easy alignment of text
  Plug 'junegunn/fzf'             " Fuzzy Search
  Plug 'junegunn/fzf.vim'         " Fuzzy Search
  Plug '/opt/homebrew/opt/fzf'    " Fuzzy Search
  Plug 'ku1ik/vim-monokai'        " Colorscheme
  Plug 'preservim/nerdtree'       " NERDTree
  Plug 'rking/ag.vim'             " Use ag, the_silver_searcher
  Plug 'stefanoverna/vim-i18n'    " Rails Translations
  Plug 'tomtom/tcomment_vim'      " comment vim-plugin
  Plug 'tpope/vim-endwise'        " Ruby on Rails
  Plug 'tpope/vim-fugitive'       " git
  Plug 'tpope/vim-rails'          " Ruby on Rails
  Plug 'tpope/vim-rbenv'          " RBenv
  Plug 'tpope/vim-repeat'         " enable repeat supported plugin maps with .
  Plug 'tpope/vim-sensible'       " Sensible defaults
  Plug 'tpope/vim-surround'       " quoting/parenthesizing made simple
  Plug 'vim-airline/vim-airline'  " Theme
  Plug 'vim-airline/vim-airline-themes' " Status
  Plug 'vim-ruby/vim-ruby'        " Vim/Ruby Configuration Files
  Plug 'vim-scripts/BufOnly.vim'  " Delete all the buffers except the current
  Plug 'vim-scripts/greplace.vim' " Global replace
call plug#end()

set autoindent                    " Auto-indent new lines
set cmdheight=2                   " Command line height
set confirm                       " Confirm on unsaved changes
set directory=~/.vimbackup,.,~/tmp,/var/tmp,/tmp " Backup directory
set encoding=utf-8                " File encoding
set expandtab                     " Use spaces instead of tabs
set formatoptions=ctqrlj          " Auto-wrap text and comments
set hidden                        " Allow multiple buffers open without saving
set hlsearch                      " Highlight search results
set ignorecase                    " Case-insensitive search
set list                          " Show tabs and end-of-line
set modeline                      " Enable modelines
set modelines=5                   " Scan up to 5 lines for a modeline
set nofoldenable                  " Don't fold automatically
set nostartofline                 " Keep cursor at the same column on new lines
set report=0                      " Always report number of lines changed
set scrolloff=4                   " Keep 4 lines above and below cursor
set shiftwidth=2                  " Number of spaces per indentation level
set showcmd                       " Show partial commands in status line
set showmatch                     " Highlight matching brackets
set smartcase                     " Use case-sensitive search when using uppercase
set softtabstop=2                 " Number of spaces a <Tab> counts for
set tabstop=2                     " Number of spaces a <Tab> counts for
set textwidth=72                  " Max width of text before wrapping
set title                         " Set window title
set viminfo=%,'500,<500,:5000,/500,@500 " Save command and search history
set visualbell                    " Use visual instead of audible bell
set whichwrap=<,>,[,]             " Allow wrap movement with certain keys
set wildignore+=.git              " Ignore .git files in wildmenu
set wildmode=list:longest,list:full " Wildmenu completion
set wrap                          " Enable line wrapping

" Indentation settings
autocmd FileType * set ts=2 sts=2 sw=2 expandtab

" Search mappings
vmap / y/<C-R>"<CR>               " Search for visually selected text
vmap ß y:Ack "<C-R>""<CR>         " Ack search for visually selected text

" General mappings
map Q gq                          " Use Q for formatting
nmap ,' cs"'                      " Swap single to double quotes
nmap ," cs'"                      " Swap double to single quotes


" Buffer navigation
" map <C-p> :bp<CR>               " Previous buffer
" map <C-n> :bn<CR>               " Next buffer

" Split window
map ,vs :vsplit<CR>               " Vertical split

" Text manipulations
map ,cel :%s/^\n//<CR>            " Strip all newlines
map ,sws :%s/\s\+$//<CR>          " Strip trailing whitespace

" F-key mappings
nnoremap <F1> :Rake<CR>           " Run Rake
map <S-F1> :!open -a Fork .<CR>   " Open Fork
nnoremap <F2> ggVG                " Select all text
nnoremap <S-F2> ggVG"+y           " Select all and copy to clipboard
nnoremap <F3> :set wrap!<CR>      " Toggle line wrapping
set pastetoggle=<F4>              " Toggle paste mode
nnoremap <F5> :set invnumber<CR>  " Toggle line numbering
map <F6> :Copilot enable<CR>      " Enable Copilot
map <S-F6> :Copilot disable<CR>   " Disable Copilot
nnoremap <F7> <Plug>(ale_fix)
nnoremap <S-F7> :ALEToggle<CR>    " Toggle ALE linting
nnoremap <F9> :NERDTreeToggle<CR> " Toggle NERDTree
nnoremap <F10> :BufExplorer<CR>   " Open Buffer Explorer
nnoremap <F11> :Wipeout!<CR>      " Wipeout all buffers
nnoremap <S-F11> :BufOnly!<CR>    " Close all except current buffer
nnoremap <F12> :Rfind             " Rails find

" Paste mode handling
function! TogglePaste()
  if &paste
    set nopaste
    set expandtab shiftwidth=2 softtabstop=2
    retab
    execute '%s/\s\+$//e'
  else
    set paste
  endif
endfunction

nnoremap <F4> :call TogglePaste()<CR>
imap <F4> <C-O>:call TogglePaste()<CR>


" Mac specific mappings
nnoremap <D-M-Left> gT
nnoremap <D-M-Right> gt
map! <D-ü> [
map! <D-+> ]
map! <D-Ü> {
map! <D-*> }
map! <D-°> ~
map! <D-Ä> \
map! <D-'> \|


" Rgrep settings
let Grep_Find_Use_Xargs = 0

" Terminal and Tmux integration
if exists('$ITERM_PROFILE')
  if exists('$TMUX')
    let &t_SI = "\<Esc>[3 q"
    let &t_EI = "\<Esc>[0 q"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
endif

" Tmux paste mode integration
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif
  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"
  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

" Set executable paths for ALE linting tools
let g:ale_css_stylelint_executable = expand('$HOMEBREW_PREFIX/bin/stylelint')
let g:ale_eruby_erbformatter_executable = expand('~/.rbenv/shims/erb-formatter')
let g:ale_eruby_erblint_executable = expand('~/.rbenv/shims/erblint')
let g:ale_eruby_htmlbeautifier_executable = expand('~/.rbenv/shims/htmlbeautifier')
let g:ale_javascript_eslint_executable = expand('$HOMEBREW_PREFIX/bin/eslint')
let g:ale_javascript_prettier_executable = expand('$HOMEBREW_PREFIX/bin/prettier')
let g:ale_json_jq_executable = expand('$HOMEBREW_PREFIX/bin/jq')
let g:ale_ruby_brakeman_executable = expand('~/.rbenv/shims/brakeman')
let g:ale_ruby_reek_executable = expand('~/.rbenv/shims/reek')
let g:ale_ruby_rubocop_executable = expand('~/.rbenv/shims/rubocop')
let g:ale_ruby_ruby_executable = expand('~/.rbenv/shims/ruby')
let g:ale_ruby_rufo_executable = expand('~/.rbenv/shims/rufo')
let g:ale_ruby_standardrb_executable = expand('~/.rbenv/shims/standardrb')

let g:ale_linters_explicit = 1    " Use only the specified linters
let g:ale_fix_on_save = 1
let g:ale_sign_column_always = 1  " Always show the sign column
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️ '

" Configure ALE linters explicitly for Ruby and ERuby
" Potentially enable later reek and standardrb
let g:ale_linters = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'css': ['stylelint'],
\   'eruby': ['erblint'],
\   'json': ['jq', 'eslint'],
\   'ruby': ['rubocop', 'brakeman'],
\   'javascript': ['eslint'],
\}

let g:ale_fixers = {
\   'css': ['prettier', 'stylelint'],
\   'eruby': ['erblint', 'erb-formatter', 'htmlbeautifier', 'remove_trailing_lines', 'trim_whitespace'],
\   'json': ['jq', 'eslint'],
\   'ruby': ['rufo', 'rubocop', 'remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier', 'eslint'],
\}

" Define a custom command :Rufo
command! Rufo call RunRufo()

" Function to execute Rufo on the entire file
function! RunRufo()
  " Define the path to the rufo executable, expanding the home directory
  let l:rufo_executable = expand('~/.rbenv/shims/rufo')

  " Run Rufo on the entire file silently and suppress messages
  silent! execute "%! " . shellescape(l:rufo_executable)
endfunction

" GitHub Copilot configuration
let g:copilot_node_command = "/opt/homebrew/bin/node"  " Specify Node.js path
" Disable Copilot by default and enable for specific filetypes
let g:copilot_enabled = v:true
let g:copilot_filetypes = {
  \ '*': v:false,
  \ 'css': v:true,
  \ 'eruby': v:true,
  \ 'gitcommit': v:true,
  \ 'html': v:true,
  \ 'js': v:true,
  \ 'json': v:true,
  \ 'ruby': v:true,
  \ 'sass': v:true,
  \ 'scss': v:true,
  \ 'vim': v:true,
  \ 'yaml': v:true,
\}

" Disable Copilot for large files
autocmd BufReadPre *
  \ let f=getfsize(expand("<afile>"))
  \ | if f > 100000 || f == -2
  \ | let b:copilot_enabled = v:false
  \ | endif

" VIM Airline Customization
let g:airline_section_b = ''  " Customize the Airline status line sections
let g:airline_section_y = ''

" Ruby Folding (help fold-commands)
let ruby_fold = 1                 " Enable folding for Ruby files
let ruby_foldable_groups = 'def'  " Fold on Ruby 'def' keywords
set foldlevel=1                   " Highest foldlevel
nnoremap <S-space> zA

" GUI-specific settings
if has("gui_running")
  set guifont=Inconsolata-dz:h16  " Set font for GUI
  set antialias                   " Enable font antialiasing
  winsize 80 80                   " Resize window to 80x80
  set guioptions-=m               " Remove menu bar
  set guioptions-=T               " Remove toolbar
endif

" Colorscheme settings
colorscheme koehler
colorscheme wildcharm  " Set colorscheme

" Private mode settings (VIM_PRIVATE=1)
if $VIM_PRIVATE
  set history=0               " Disable command history
  set nobackup                " Disable backup files
  set nomodeline              " Ignore modeline settings
  set noshelltemp             " Do not use shell temp files
  set noswapfile              " Disable swap files
  set noundofile              " Disable undo files
  set nowritebackup           " Disable write backup files
  set secure                  " Enable secure mode
  set viminfo=""              " Do not store viminfo
  let g:copilot_filetypes = { '*': v:false, }  " Disable Copilot
  let b:copilot_enabled = v:false
endif

if has("gui_running")                   " GUI running?
  set guifont=Inconsolata-dz:h16        " Bigger font for MacVim
  set antialias                         " Anti Aliased Font
  winsize 80 80                         " Resize Window
  set guioptions-=m                     " Remove menu bar
  set guioptions-=T                     " Remove toolbar
endif

" vim:filetype=vim:fileencoding=utf-8:
